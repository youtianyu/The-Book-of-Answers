import os
import io
import time
import json
import zipfile
import streamlit as st
st.set_page_config(page_title="Á≠îÊ°à‰πã‰π¶",page_icon="icon.png",layout="wide",menu_items={
    'Get Help': 'https://github.com/youtianyu/The-Book-of-Answers/tree/main',
    'Report a bug': 'https://github.com/youtianyu/The-Book-of-Answers/tree/main',
    'About': '  ËøôÊòØ‰∏Ä‰∏™Âü∫‰∫éPythonÁöÑÁ≠îÊ°à‰πã‰π¶Ôºå‰ΩøÁî®StreamlitÂà∂‰Ωú! Âì™‰∫õ‰∫∫ÂèØ‰ª•‰ΩøÁî®"Á≠îÊ°à‰πã‰π¶":Âè™ÊúâÂ≠¶ÁîüÔºåËÄÅÂ∏àÂãøÁî®'
})
if os.path.exists("set_rq_height.txt"):
    with open("set_rq_height.txt", "r", encoding="utf-8") as f:
        rq_height = int(f.read())
else:
    with open("set_rq_height.txt", "w", encoding="utf-8") as f:
        f.write("500")
    rq_height = 500
if os.path.exists("publicity.txt"):
    with open("publicity.txt", "r", encoding="utf-8") as f:
        additionalcode = f.read()
else:
    with open("publicity.txt", "w", encoding="utf-8") as f:
        f.write("")
    additionalcode = ""
settings = {
    "additionalcode": additionalcode,
    "long_term_file":"data/"
}
def write_stream(response):
    global total_tokens,text
    text = ""
    total_tokens = 0
    for i in response:
        v = i.choices[0].delta.content
        yield v 
        try:
            text += v
            total_tokens += i.usage.total_tokens
        except:
            pass
def stream_data(text):
    for word in list(text):
        yield word
        time.sleep(0.001)
def count_files_in_directory(directory):
    file_count = 0
    for entry in os.scandir(directory):
        if entry.is_file():
            file_count += 1
    return file_count
def get_folder_size_num(folder_path):
    total_size = 0
    total_num = 0
    for dirpath, dirnames, filenames in os.walk(folder_path):
        for f in filenames:
            total_size += os.path.getsize(os.path.join(dirpath, f))
            total_num += 1
    return total_size,total_num
if not "mode" in st.session_state:
    st.session_state["mode"] = "books"
if "loder" not in st.session_state:
    with st.spinner("Loading..."):
        time.sleep(1)
    st.session_state.loder = True
    st.rerun()
if "login" not in st.session_state:
    st.session_state.login = False
if os.path.exists("is_login_free_mode.txt"):
    with open("is_login_free_mode.txt", "r", encoding="utf-8") as f:
        is_login_free_mode = f.read()
else:
    is_login_free_mode = "disable"
    open("is_login_free_mode.txt", "w", encoding="utf-8").write(is_login_free_mode)
if st.session_state.login == False:
    if is_login_free_mode == "disable":
        coll,colc,colr = st.columns([1,2,1])
        with colc:
            st.title("  ")
            st.title("        :blue[ÁôªÂΩï]")
            user = st.text_input("Áî®Êà∑Âêç",value="root")
            password = st.text_input("ÂØÜÁ†Å",type="password")
            if st.button("ÁôªÂΩï"):
                if user == st.secrets.user_password.user and password == st.secrets.user_password.password:
                    st.session_state.login = True
                    st.info("Êéà‰∫àËÆøÈóÆÊùÉÈôê")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("Áî®Êà∑ÂêçÊàñÂØÜÁ†ÅÈîôËØØ")
                    time.sleep(1)
                    st.rerun()
    else:
        st.session_state.login = True
        st.rerun()
elif st.session_state['mode'] == "books":
    st.sidebar.title(":blue[Á≠îÊ°à‰πã‰π¶] :blue_book:")
    r_mode = st.sidebar.radio("ÂäüËÉΩ:",[":red[Êü•ÊâæÁ≠îÊ°à]",":orange[AIÊ±ÇËß£]",":green[Êõ¥Â§ö‰ø°ÊÅØ]",":blue[ËÆæÁΩÆ]"])
    if r_mode == ":red[Êü•ÊâæÁ≠îÊ°à]":
        st.title(":red[Á≠îÊ°à‰πã‰π¶]")
        data = json.load(open("data.json","r",encoding="utf-8"))
        st.caption("Âú®**Âè≥‰æß**ÈÄâÊã©ÊÇ®ÁöÑÁªÉ‰π†ÂÜåÔºåÁÑ∂ÂêéÁÇπÂáª _‚Äú‰∏ãËΩΩ‚Äù_ ÊåâÈíÆÔºå‰∏ãËΩΩÂ≠óÂÖ∏„ÄÇ")
        st.divider()
        if not os.path.exists("data.json"):
            st.error("Êï∞ÊçÆÊñá‰ª∂‰∏çÂ≠òÂú®")
        else:
            if data == {}:
                st.error("Êï∞ÊçÆ‰∏∫Á©∫")
            else:
                subject = st.sidebar.selectbox("ÁªÉ‰π†ÂÜå:",list(data.keys()))
                if subject in data:
                    if data[subject] != {}:
                        sub_class = st.sidebar.selectbox("Á±ª:",list(data[subject].keys()))
                        if data[subject][sub_class] != {}:
                            sub_material = st.sidebar.selectbox("Ê®°Âùó:",list(data[subject][sub_class].keys()))
                            if data[subject][sub_class][sub_material] != {}:
                                mtrl_data = data[subject][sub_class][sub_material]
                                mtrl_name = mtrl_data["name"]
                                mtrl_date = mtrl_data["date"]
                                mtrl_dir = mtrl_data["dir"]
                                if os.path.exists(mtrl_dir):
                                    mtrl_ls_dir = os.listdir(mtrl_dir)
                                    mtrl_num = len(mtrl_ls_dir)
                                    if mtrl_num != 0:
                                        st.caption(f"ÂêçÁß∞: **{mtrl_name}**")
                                        st.caption(f"Ê∑ªÂä†Êó•Êúü: **{mtrl_date}**")
                                        st.caption(f"Êñá‰ª∂Âú∞ÂùÄ: **{mtrl_dir}**")
                                        with st.expander("ÈÖçÁΩÆ",expanded=False,icon="‚öôÔ∏è"):
                                            coll5,colr5,_ = st.columns([1,4,10])
                                            with coll5:
                                                st.write("  ")
                                                st.write("  ")
                                                st.write("Â≠ó‰Ωì:")
                                            with colr5:                                    
                                                mode = st.selectbox("    ",["ÊµÅ","12px","14px","16px","18px","20px","22px","24px","26px","28px","30px","32px","34px","36px","38px","40px"])
                                        with st.expander("ËåÉÂõ¥",expanded=True,icon="üìú"):
                                            if abs(0-(mtrl_num-1))>0:
                                                u_mtrl_range = st.slider("ÈÄâÊã©‰∏Ä‰∏™ËåÉÂõ¥:",0,mtrl_num-1,[0,0])
                                            else:
                                                u_mtrl_range = (0,0)
                                        mtrl_ls_dir = sorted(mtrl_ls_dir)
                                        mtrl_ls_dir = [mtrl_dir + os.sep + i for i in mtrl_ls_dir]
                                        if u_mtrl_range[0] == 0 and u_mtrl_range[1] > 30:
                                            st.warning("Âè™ËÉΩÈÄâÊã©30Á´†Á≠îÊ°à")
                                        else:
                                            with st.spinner("Ê≠£Âú®Âä†ËΩΩ..."):
                                                dbs = []
                                                for i2 in range(u_mtrl_range[0],u_mtrl_range[1]+1):
                                                    i = mtrl_ls_dir[i2]
                                                    try:
                                                        if i.endswith(".png") or i.endswith(".jpg") or i.endswith(".jpeg") or i.endswith(".bmp") or i.endswith(".gif"):
                                                            st.image(i,use_column_width=True)
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".mp3") or i.endswith(".wav") or i.endswith(".flac"):
                                                            st.audio(i)
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".mp4") or i.endswith(".avi") or i.endswith(".mov"):
                                                            with st.container(height=max(1000//(abs(u_mtrl_range[0]-u_mtrl_range[1])+1),rq_height),border=True):
                                                                st.video(i)
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".txt"):
                                                            with open(i,"r",encoding="utf-8") as f:
                                                                with st.container(height=max(1000//(abs(u_mtrl_range[0]-u_mtrl_range[1])+1),rq_height),border=True):
                                                                    dh_data = f.read()
                                                                    if "\n" in dh_data:
                                                                        for i3 in dh_data.split("\n"):
                                                                            if mode == "ÊµÅ":
                                                                                st.write_stream(stream_data(i3))
                                                                            else:
                                                                                st.markdown(f"<p style='font-size:{mode};'>{i3}</p>", unsafe_allow_html=True)
                                                                    else:
                                                                        if mode == "ÊµÅ":
                                                                            st.write_stream(stream_data(f.read()))
                                                                        else:
                                                                            st.markdown(f"<p style='font-size:{mode};'>{f.read()}</p>", unsafe_allow_html=True)
                                                                st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".py"):
                                                            show_code = False
                                                            with open(i,"r",encoding="utf-8") as f:
                                                                with st.container(height=max(1000//(abs(u_mtrl_range[0]-u_mtrl_range[1])+1),rq_height),border=True):
                                                                    py_data = f.read()
                                                                    with st.spinner("Ê≠£Âú®ËøêË°åÊéß‰ª∂..."):
                                                                        try:
                                                                            exec(py_data,globals())
                                                                            show_code = True
                                                                        except:
                                                                            st.error("Êéß‰ª∂ËøêË°åÂ§±Ë¥•")
                                                                            st.code(py_data,language="python")
                                                                            show_code = False
                                                                with st.expander("Ê∫ê"):
                                                                    st.code(py_data,language="python")
                                                                st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".json"):
                                                            with st.spinner("Ê≠£Âú®Âä†ËΩΩJSONÊñá‰ª∂..."):
                                                                with st.container(height=max(1000//(abs(u_mtrl_range[0]-u_mtrl_range[1])+1),rq_height),border=True):
                                                                    with open(i,"r",encoding="utf-8") as f:
                                                                        st.json(json.load(f))
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".csv"):
                                                            import pandas as pd
                                                            with st.spinner("Ê≠£Âú®Âä†ËΩΩCSVÊñá‰ª∂..."):
                                                                with st.container(height=max(1000//(abs(u_mtrl_range[0]-u_mtrl_range[1])+1),rq_height),border=True):
                                                                    with open(i,"r",encoding="utf-8") as f:
                                                                        st.dataframe(pd.read_csv(f))
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        elif i.endswith(".pdf"):
                                                            import base64
                                                            with st.spinner("Ê≠£Âú®Âä†ËΩΩPDFÊñá‰ª∂..."):
                                                                with st.container(height=max(1000//(abs(u_mtrl_range[0]-u_mtrl_range[1])+1),rq_height),border=True):
                                                                    with open(i, "rb") as f:
                                                                        base64_pdf = base64.b64encode(f.read()).decode('utf-8')
                                                                        st.markdown(f'<iframe src="data:application/pdf;base64,{base64_pdf}" width="700" height="1000" type="application/pdf"></iframe>', unsafe_allow_html=True)
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                        else:
                                                            st.download_button(label="‰∏ãËΩΩÊñá‰ª∂",data=open(i,"rb"),file_name=i)
                                                            st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                    except:
                                                        st.error("Âä†ËΩΩÊñá‰ª∂Êó∂Âá∫Èîô")
                                                        st.download_button(label="‰∏ãËΩΩÊñá‰ª∂",data=open(i,"rb"),file_name=i)
                                                        st.caption(f"{mtrl_name} Á¨¨{i2+1}Á´†  "+str(i))
                                                    dbs.append(i)
                                            buffer = io.BytesIO()
                                            with zipfile.ZipFile(buffer, 'w') as zipf:
                                                for file in dbs:
                                                    # Â∞ÜÊñá‰ª∂Ê∑ªÂä†Âà∞ZIPÊñá‰ª∂‰∏≠
                                                    zipf.write(file)
                                            buffer.seek(0)
                                            zip_bytes = buffer.read()
                                            st.sidebar.download_button(f"‰∏ãËΩΩÈÄâ‰∏≠ÁöÑ{len(dbs)}‰∏™Á≠îÊ°à",data=zip_bytes,file_name=f"{mtrl_name}.zip",mime="application/zip")
                                    else:
                                        st.warning("ÊöÇÊó†ÁªÉ‰π†ÂÜå")
                                else:
                                    st.warning("ÊöÇÊó†ÁªÉ‰π†ÂÜå")
                            else:
                                st.warning("ÊöÇÊó†ÁªÉ‰π†ÂÜå")
                        else:
                            st.warning("ÊöÇÊó†ÁªÉ‰π†ÂÜå")
                    else:
                        st.warning("ÊöÇÊó†ÁªÉ‰π†ÂÜå")
                else:
                    st.warning("ÊöÇÊó†ÁªÉ‰π†ÂÜå")
        if st.sidebar.button("ËøõÂÖ•Êñá‰ª∂ÁÆ°ÁêÜÂô®"):
            st.session_state["mode"] = "manager"
            st.rerun()
        try:
            exec(settings["additionalcode"],globals())
        except:
            pass
    elif r_mode == ":orange[AIÊ±ÇËß£]":
        with st.sidebar:
            openai_api_key = st.text_input("ËØ∑ËæìÂÖ•ÊÇ®ÁöÑ API Key", key="chatbot_api_key", type="password")
        if "zhipuAI_api_key" in st.secrets:
            if openai_api_key in st.secrets.zhipuAI_api_key:
                openai_api_key = st.secrets.zhipuAI_api_key[openai_api_key]
        st.title(":orange[ChatGPT/GLM]")
        st.caption("Streamlit ËÅäÂ§©Êú∫Âô®‰∫∫")
        if "messages" not in st.session_state:
            st.session_state["messages"] = [{"role": "assistant", "content": "ÊÇ®Â•ΩÔºåÊàëÊòØ‰∫∫Â∑•Êô∫ËÉΩÂä©Êâã„ÄÇÊàëÁöÑ‰ªªÂä°ÊòØÈíàÂØπÁî®Êà∑ÁöÑÈóÆÈ¢òÂíåË¶ÅÊ±ÇÊèê‰æõÈÄÇÂΩìÁöÑÁ≠îÂ§çÂíåÊîØÊåÅ„ÄÇÊàëÂèØ‰ª•ÂõûÁ≠îÂêÑÁßçÈ¢ÜÂüüÁöÑÈóÆÈ¢òÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÁßëÂ≠¶„ÄÅÊäÄÊúØ„ÄÅÂéÜÂè≤„ÄÅÊñáÂåñ„ÄÅÂ®±‰πêÁ≠â„ÄÇÂ¶ÇÊûúÊÇ®Êúâ‰ªª‰ΩïÈóÆÈ¢òÔºåËØ∑ÈöèÊó∂ÂêëÊàëÊèêÈóÆ„ÄÇ"}]
        with st.container(height=rq_height,border=False):
            for msg in st.session_state.messages:
                st.chat_message(msg["role"]).write(msg["content"])
        total_tokens = 0
        text = ""
        if os.path.exists("set_model_name.json"):
            with open("set_model_name.json", "r", encoding="utf-8") as f:
                model_name_s = json.load(f)
        else:
            model_name_s = {"openai":"gpt-4","zhipuai":"glm-4-Flash"}
            with open("set_model_name.json", "w", encoding="utf-8") as f:
                json.dump(model_name_s, f)
        if os.path.exists("set_openai_base_url.json"):
            with open("set_openai_base_url.json", "r", encoding="utf-8") as f:
                openai_base_url = json.load(f)
        else:
            openai_base_url = {"openai_base_url":0}
            with open("set_openai_base_url.json", "w", encoding="utf-8") as f:
                json.dump(openai_base_url, f)
        with st.sidebar.expander("ËÆæÁΩÆ"):
            if os.path.exists("set_tokens.txt"):
                with open("set_tokens.txt", "r", encoding="utf-8") as f:
                    s_tokens = int(f.read())
            else:
                with open("set_tokens.txt", "w", encoding="utf-8") as f:
                    f.write("1024")
                s_tokens = 1024
            if os.path.exists("set_ai_oset.txt"):
                with open("set_ai_oset.txt", "r", encoding="utf-8") as f:
                    ai_oset = json.load(f)
            else:
                with open("set_ai_oset.txt", "w", encoding="utf-8") as f:
                    f.write(json.dumps({"temperature":0.95,"top_p":0.8,"max_tokens":min(1024,s_tokens)}))
                ai_oset = {"temperature":0.95,"top_p":0.8,"max_tokens":min(1024,s_tokens)}
            temperature = st.number_input("Ê∏©Â∫¶", min_value=0.0, max_value=1.5, value=ai_oset["temperature"], step=0.01)
            top_p = st.number_input("Top P", min_value=0.0, max_value=1.0, value=ai_oset["top_p"], step=0.01)
            max_tokens = st.number_input("ÊúÄÂ§ß‰ª§ÁâåÊï∞", min_value=50, max_value=s_tokens, value=min(ai_oset["max_tokens"], s_tokens), step=1)
        if st.sidebar.button("Ê∏ÖÁ©∫ËÆ∞ÂΩï"):
            st.session_state.messages = []
        if prompt := st.chat_input():
            if not openai_api_key:
                st.info("ËØ∑Ê∑ªÂä†ÊÇ®ÁöÑ OpenAI API ÂØÜÈí•‰ª•ÁªßÁª≠„ÄÇ")
            else:
                if "sk-" in openai_api_key:
                    from openai import OpenAI as ai_module
                else:
                    from zhipuai import ZhipuAI as ai_module
                # ÂàõÂª∫ÂØπË±°
                if "sk-" in openai_api_key:
                    model_name = model_name_s["openai"]
                else:
                    model_name = model_name_s["zhipuai"]
                if openai_base_url["openai_base_url"] != 0:
                    ai = ai_module(api_key=openai_api_key, base_url=openai_base_url["openai_base_url"])
                else:
                    ai = ai_module(api_key=openai_api_key)
                st.session_state.messages.append({"role": "user", "content": prompt})
                st.chat_message("user").write(prompt)
                response = ai.chat.completions.create(model=model_name, messages=st.session_state.messages,stream=True, temperature=temperature, top_p=top_p, max_tokens=max_tokens)
                total_tokens = 0
                text = ""
                with st.spinner("Ê≠£Âú®ÁîüÊàêÂõûÂ§ç‰∏≠..."):
                    st.chat_message("assistant").write_stream(write_stream(response))
                total_tokens = total_tokens
                msg = text
                st.session_state.messages.append({"role": "assistant", "content": msg})
                st.caption(f"ÊÄª‰ΩøÁî®‰ª§ÁâåÊï∞Ôºö{total_tokens}")
                try:
                    if os.path.exists("ai_use_count.json"):
                        with open("ai_use_count.json", "r", encoding="utf-8") as f:
                            ai_use_count = json.load(f)
                    else:
                        ai_use_count = {"use_count":0, "total_tokens":0}
                    ai_use_count["use_count"] = ai_use_count["use_count"] + 1
                    ai_use_count["total_tokens"] = ai_use_count["total_tokens"] + total_tokens
                    with open("ai_use_count.json", "w", encoding="utf-8") as f:
                        json.dump(ai_use_count, f)
                except:
                    if os.path.exists("ai_use_count.json"):
                        with open("ai_use_count.json", "r", encoding="utf-8") as f:
                            ai_use_count = json.load(f)
                    else:
                        ai_use_count = {"use_count":0, "total_tokens":0}
                    json.dump(ai_use_count, f)
        try:
            exec(settings["additionalcode"],globals())
        except:
            pass
    elif r_mode == ":green[Êõ¥Â§ö‰ø°ÊÅØ]":
        if os.path.exists("others.txt"):
            others_data = open("others.txt", "r", encoding="utf-8").read()
        else:
            open("others.txt", "w", encoding="utf-8").write("st.info('ÊöÇÊó†‰ø°ÊÅØ, ËØ∑Ëá™Ë°åÊ∑ªÂä†')")
            others_data = "st.info('ÊöÇÊó†‰ø°ÊÅØ, ËØ∑Ëá™Ë°åÊ∑ªÂä†')"
        exec(others_data,globals())
        try:
            exec(settings["additionalcode"],globals())
        except:
            pass
    elif r_mode == ":blue[ËÆæÁΩÆ]":
        st.title(":blue[ËÆæÁΩÆ]")
        if st.sidebar.text_input("2FA-ÂØÜÈí•", key="2FA_key", type="password") == st.secrets["2FA"]["2FA_key"]:
            if st.sidebar.button("ÈÄÄÂá∫"):
                if "login" in st.session_state:
                    del st.session_state.login
                if "loder" in st.session_state:
                    del st.session_state.loder
                if "messages" in st.session_state:
                    del st.session_state["messages"]
                st.rerun()
            tab0,tab1,tab2,tab3,tab4,tab6,tab5 = st.tabs(["ÁôªÂΩï","Êï∞ÊçÆÂ§ßÂ∞è","AiËÆæÁΩÆ","Êõ¥Â§ö‰ø°ÊÅØ","ÂÆπÂô®","ÂÖ¨Á§∫","Âà∑Êñ∞"])
            with tab0:
                if os.path.exists("is_login_free_mode.txt"):
                    with open("is_login_free_mode.txt", "r", encoding="utf-8") as f:
                        is_login_free_mode = f.read()
                else:
                    is_login_free_mode = "disable"
                    open("is_login_free_mode.txt", "w", encoding="utf-8").write(is_login_free_mode)
                is_login_free_mode = st.selectbox("ÂÖçÁôªÂΩïÊ®°Âºè",["disable","enable"],index=["disable","enable"].index(is_login_free_mode))
                with open("is_login_free_mode.txt", "w", encoding="utf-8") as f:
                    f.write(is_login_free_mode)
                st.info("Â∑≤‰øùÂ≠ò")

            with tab1:
                size,num = get_folder_size_num("data")
                st.write("Êï∞ÊçÆÂ§ßÂ∞è‰∏∫",size/1000,"ÂçÉÂ≠óËäÇ")
                st.write("Êï∞ÊçÆÊñá‰ª∂Êï∞‰∏∫",num,"‰∏™")
            with tab2:
                with st.expander("Ê®°ÂûãËÆæÁΩÆ"):
                    if os.path.exists("set_model_name.json"):
                        with open("set_model_name.json", "r", encoding="utf-8") as f:
                            model_name = json.load(f)
                    else:
                        model_name = {"openai":"gpt-4","zhipuai":"glm-4-Flash"}
                        with open("set_model_name.json", "w", encoding="utf-8") as f:
                            json.dump(model_name, f)
                    openai_model =  st.text_input("openaiÊ®°Âûã", value=model_name["openai"])
                    if os.path.exists("set_openai_base_url.json"):
                        with open("set_openai_base_url.json", "r", encoding="utf-8") as f:
                            openai_base_url = json.load(f)
                    else:
                        openai_base_url = {"openai_base_url":0}
                        with open("set_openai_base_url.json", "w", encoding="utf-8") as f:
                            json.dump(openai_base_url, f)
                    if st.checkbox("Ê∑ªÂä†base_url",value=(openai_base_url["openai_base_url"]!=0 and openai_base_url["openai_base_url"]!="0")):
                        openai_base_url["openai_base_url"] = st.text_input("openai_base_url", value="" if openai_base_url["openai_base_url"]==0 else openai_base_url["openai_base_url"])
                    else:
                        openai_base_url["openai_base_url"] = 0

                    zhipuai_model =  st.text_input("zhipuaiÊ®°Âûã", value=model_name["zhipuai"])
                    model_name = {"openai":openai_model,"zhipuai":zhipuai_model}
                    with open("set_model_name.json", "w", encoding="utf-8") as f:
                        json.dump(model_name, f)
                    with open("set_openai_base_url.json", "w", encoding="utf-8") as f:
                        json.dump(openai_base_url, f)
                    st.info("Â∑≤‰øùÂ≠ò")

                with st.expander("ai‰ΩøÁî®Ê¨°Êï∞"):
                    if os.path.exists("ai_use_count.json"):
                        with open("ai_use_count.json", "r", encoding="utf-8") as f:
                            ai_use_count = json.load(f)
                    else:
                        ai_use_count = {"use_count":0, "total_tokens":0}
                    st.write("ai‰ΩøÁî®Ê¨°Êï∞‰∏∫",ai_use_count["use_count"],"Ê¨°")
                    st.write("ai‰ΩøÁî®ÊÄª‰ª§ÁâåÊï∞‰∏∫",ai_use_count["total_tokens"],"‰∏™")
                    if st.button("ÈáçÁΩÆ"):
                        ai_use_count = {"use_count":0, "total_tokens":0}
                        with open("ai_use_count.json", "w", encoding="utf-8") as f:
                            json.dump(ai_use_count, f)
                with st.expander("ËÆæÁΩÆÊúÄÂ§ß‰ª§ÁâåÊï∞"):
                    if os.path.exists("set_tokens.txt"):
                        with open("set_tokens.txt", "r", encoding="utf-8") as f:
                            tokens = int(f.read())
                    else:
                        with open("set_tokens.txt", "w", encoding="utf-8") as f:
                            f.write("1024")
                        tokens = 1024
                    max_tokens = st.number_input("ÊúÄÂ§ß‰ª§ÁâåÊï∞", min_value=50, max_value=8192, value=tokens, step=1)
                    with open("set_tokens.txt", "w", encoding="utf-8") as f:
                        f.write(str(max_tokens))
                    st.info("Â∑≤‰øùÂ≠ò")
                with st.expander("ÈªòËÆ§ËÆæÁΩÆ"):
                    if os.path.exists("set_ai_oset.txt"):
                        with open("set_ai_oset.txt", "r", encoding="utf-8") as f:
                            ai_oset = json.load(f)
                    else:
                        with open("set_ai_oset.txt", "w", encoding="utf-8") as f:
                            f.write(json.dumps({"temperature":0.95,"top_p":0.8,"max_tokens":min(1024,max_tokens)}))
                        ai_oset = {"temperature":0.95,"top_p":0.8,"max_tokens":min(1024,max_tokens)}
                    oset_temperature = st.number_input("temperature", min_value=0.0, max_value=1.5, value=ai_oset["temperature"], step=0.01)
                    oset_top_p = st.number_input("top_p", min_value=0.0, max_value=1.0, value=ai_oset["top_p"], step=0.01)
                    oset_max_tokens = st.number_input("max_tokens", min_value=50, max_value=8192, value=min(ai_oset["max_tokens"],max_tokens), step=1)
                    with open("set_ai_oset.txt", "w", encoding="utf-8") as f:
                        f.write(json.dumps({"temperature":oset_temperature,"top_p":oset_top_p,"max_tokens":oset_max_tokens}))
                    st.info("Â∑≤‰øùÂ≠ò")
            with tab3:
                if os.path.exists("others.txt"):
                    others_data = open("others.txt", "r", encoding="utf-8").read()
                else:
                    open("others.txt", "w", encoding="utf-8").write("st.info('ÊöÇÊó†‰ø°ÊÅØ, ËØ∑Ëá™Ë°åÊ∑ªÂä†')")
                    others_data = "st.info('ÊöÇÊó†‰ø°ÊÅØ, ËØ∑Ëá™Ë°åÊ∑ªÂä†')"
                others_data = st.text_area("      ", others_data,key="change_others_data")
                open("others.txt", "w", encoding="utf-8").write(others_data)
                st.info("Â∑≤‰øùÂ≠ò")
            with tab4:
                if os.path.exists("set_rq_height.txt"):
                    with open("set_rq_height.txt", "r", encoding="utf-8") as f:
                        rq_height = int(f.read())
                else:
                    with open("set_rq_height.txt", "w", encoding="utf-8") as f:
                        f.write("500")
                    rq_height = 500
                rq_height = st.number_input("ÂÆπÂô®È´òÂ∫¶", min_value=0, max_value=1400, value=rq_height, step=1)
                with open("set_rq_height.txt", "w", encoding="utf-8") as f:
                    f.write(str(rq_height))
                st.info("Â∑≤‰øùÂ≠ò")
            with tab6:
                if os.path.exists("publicity.txt"):
                    publicity_data = open("publicity.txt", "r", encoding="utf-8").read()
                else:
                    open("publicity.txt", "w", encoding="utf-8").write("")
                    publicity_data = ""
                publicity_data = st.text_area("      ", value = publicity_data,key="change_publicity_data")
                open("publicity.txt", "w", encoding="utf-8").write(publicity_data)
                st.info("Â∑≤‰øùÂ≠ò")
            with tab5:
                if st.button("Âà∑Êñ∞"):
                    st.rerun()
        else:
            if st.sidebar.button("ÈÄÄÂá∫"):
                if "login" in st.session_state:
                    del st.session_state.login
                if "loder" in st.session_state:
                    del st.session_state.loder
                if "messages" in st.session_state:
                    del st.session_state["messages"]
                st.rerun()
            st.warning("ËØ∑ËæìÂÖ•Ê≠£Á°ÆÁöÑ2FAÂØÜÈí•")
    
elif st.session_state["mode"] == "manager":
    import shutil
    datadir = settings["long_term_file"]
    if not "is_write" in st.session_state:
        st.session_state["is_write"] = False
    if "2FA" in st.secrets:
        if "2FA_key" in st.secrets["2FA"]:
            settings["password"] = st.secrets["2FA"]["2FA_key"]
    if st.session_state["is_write"] == False:
        try:
            if "password" in settings:
                # È™åËØÅË∫´‰ªΩ
                password = st.sidebar.text_input("ÂØÜÁ†Å:", type="password")
                if not password == "":
                    if settings["password"] == password:
                        st.sidebar.info("Êéà‰∫àÂÜôÂÖ•ÊùÉÈôê")
                        st.session_state["is_write"] = True
                    else:
                        st.sidebar.warning("ÂØÜÁ†ÅÊó†Êïà")
                else:
                    st.sidebar.success("ËØ∑ËæìÂÖ•ÂØÜÁ†Å")
            else:
                st.sidebar.warning("Êú™ËÆæÁΩÆÂØÜÁ†Å")
        except:
            st.rerun()
    def get_folder_structure(root_folder):
        # ÂàùÂßãÂåñÁªìÊûúÂ≠óÂÖ∏
        result = {}
        path = root_folder
        listdir = os.listdir(root_folder)
        for f in listdir:
            if os.path.isdir(os.path.join(path, f)):
                result[f] = get_folder_structure(os.path.join(path, f))
                # ÈÄíÂΩíË∞ÉÁî®

            else:
                result[f] = None
                # Êñá‰ª∂Ë∑ØÂæÑ
        return result
    def select_file(data_tree,path=".",n=0):
        list_data_tree = list(data_tree.keys())
        list_data_tree.insert(0,".")
        selected_file = st.sidebar.selectbox(" ", list_data_tree,key="file_select_"+str(n))
        if selected_file == ".":
            return path
        elif data_tree[selected_file] == None:
            return path+os.sep+selected_file
        elif data_tree[selected_file] == {}:
            return path+os.sep+selected_file
        else:
            return select_file(data_tree[selected_file],path+os.sep+selected_file,n=n+1)
    def is_dir(path,data_tree):
        path = path.split(os.sep)
        path.pop(0)
        last = ""
        while len(path)>0:
            if not path[0] == None:
                if path[0] in list(data_tree.keys()):
                    data_tree = data_tree[path[0]]
                    last = path[0]
                    path.pop(0)
                else:
                    return False
            else:
                return False
        if data_tree == None:
            return False
        else:
            return True
    data_dir = datadir
    if st.session_state["is_write"]:
        try:
            st.title(":blue[Êñá‰ª∂ÁÆ°ÁêÜÂô®üóÇÔ∏è]")
            st.caption("ÁÆ°ÁêÜÂëòÊ®°Âºè")
            data_tree = get_folder_structure(data_dir)
            select_file_or_dir = select_file(data_tree)
            select_file_or_dir_abs = select_file_or_dir.replace(".",data_dir,1)
            if is_dir(select_file_or_dir,data_tree):
                if select_file_or_dir != ".":
                    st.info(select_file_or_dir.replace(os.sep," > "))
                    file_upload_tab,new_dir_tab,delete_file_tab,rename_dir_tab = st.tabs(["‰∏ä‰º†Êñá‰ª∂","Êñ∞Âª∫Êñá‰ª∂Â§π","Âà†Èô§Êñá‰ª∂Â§π","ÈáçÂëΩÂêçÊñá‰ª∂Â§π"])
                    with file_upload_tab:
                        is_overwrite = st.checkbox("Ë¶ÜÁõñÂ∑≤ÊúâÊñá‰ª∂",key="is_overwrite")
                        upload_file = st.file_uploader("‰∏ä‰º†Êñá‰ª∂",key="upload_file",accept_multiple_files=True)
                        if upload_file:
                            if st.button("‰∏ä‰º†",key="upload_file_button"):
                                with st.spinner("‰∏ä‰º†‰∏≠..."):
                                    for file in upload_file:
                                        if is_overwrite:
                                            with open(select_file_or_dir_abs+os.sep+file.name,"wb") as f:
                                                f.write(file.read())
                                            st.success(file.name+ " ‰∏ä‰º†ÊàêÂäü")
                                        else:
                                            if os.path.exists(select_file_or_dir_abs+os.sep+file.name):
                                                st.warning(file.name+ " Â∑≤Â≠òÂú®")
                                            else:
                                                with open(select_file_or_dir_abs+os.sep+file.name,"wb") as f:
                                                    f.write(file.read())
                                                st.success(file.name+ " ‰∏ä‰º†ÊàêÂäü")
                                upload_file = None
                                st.info("‰∏ä‰º†ÂÆåÊàê")
                                st.rerun()
                            else:
                                st.success("ËØ∑ÁÇπÂáª‰∏ä‰º†ÊåâÈíÆ‰ª•‰∏ä‰º†Êñá‰ª∂")
                        else:
                            st.success("ËØ∑ÈÄâÊã©Êñá‰ª∂")
                    with new_dir_tab:
                        new_dir_name = st.text_input("ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞",key="new_dir_name")
                        if new_dir_name != "":
                            new_dir = st.button("Êñ∞Âª∫Êñá‰ª∂Â§π",key="new_folder")
                            if new_dir:
                                not_in_name = ["\\","/",">","<",":","*","?","\"","|"]
                                can_be_name = True
                                for i in not_in_name:
                                    if i in new_dir_name:
                                        can_be_name = False
                                if can_be_name:
                                    if os.path.exists(select_file_or_dir_abs+os.sep+new_dir_name):
                                        st.warning("Êñá‰ª∂Â§πÂ∑≤Â≠òÂú®, Êñ∞Âª∫Êñá‰ª∂Â§πÂ§±Ë¥•")
                                    else:
                                        os.mkdir(select_file_or_dir_abs+os.sep+new_dir_name)
                                        st.info("Êñ∞Âª∫Êñá‰ª∂Â§πÊàêÂäü")
                                        st.rerun()
                                else:
                                    st.warning("Êñá‰ª∂Â§πÂêçÁß∞‰∏çÂêàÊ≥ï")
                                new_dir = False
                            else:
                                st.success("ËØ∑ÁÇπÂáªÊñ∞Âª∫Êñá‰ª∂Â§πÊåâÈíÆ‰ª•Êñ∞Âª∫Êñá‰ª∂Â§π")
                        else:
                            st.success("ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞")
                    with delete_file_tab:
                        delete_file = st.button("Âà†Èô§Êñá‰ª∂Â§π",key="delete_dir")
                        if delete_file:
                            if os.path.isdir(select_file_or_dir_abs):
                                shutil.rmtree(select_file_or_dir_abs)
                                st.info("Âà†Èô§Êñá‰ª∂Â§πÊàêÂäü")
                                st.rerun()
                            else:
                                st.warning("Âà†Èô§Êñá‰ª∂Â§πÂ§±Ë¥•")
                            delete_file = False
                    with rename_dir_tab:
                        new_dir_name = st.text_input("ËØ∑ËæìÂÖ•Êõ¥ÂêçÂêéÁöÑÊñá‰ª∂Â§πÂêçÁß∞",key="rename_dir_name")
                        if new_dir_name != "":
                            rename_dir = st.button("ÈáçÂëΩÂêçÊñá‰ª∂Â§π",key="rename_folder")
                            if rename_dir:
                                not_in_name = ["\\","/",">","<",":","*","?","\"","|"]
                                if os.path.isdir(select_file_or_dir_abs):
                                    can_be_name = True
                                    for i in not_in_name:
                                        if i in new_dir_name:
                                            can_be_name = False
                                    if can_be_name:
                                        renamed = (os.sep).join(select_file_or_dir_abs.split(os.sep)[:-1])+os.sep+new_dir_name
                                        print(renamed)
                                        if os.path.exists(renamed):
                                            st.warning("Êñá‰ª∂Â§πÂ∑≤Â≠òÂú®")
                                        else:
                                            os.rename(select_file_or_dir_abs,renamed)
                                            st.info("ÈáçÂëΩÂêçÊñá‰ª∂Â§πÊàêÂäü")
                                            st.rerun()
                                    else:
                                        st.warning("Êñá‰ª∂Â§πÂêçÁß∞‰∏çÂêàÊ≥ï")
                                else:
                                    st.warning("ÈáçÂëΩÂêçÊñá‰ª∂Â§πÂ§±Ë¥•")
                                rename_dir = False
                            else:
                                st.success("ËØ∑ÁÇπÂáªÈáçÂëΩÂêçÊñá‰ª∂Â§πÊåâÈíÆ‰ª•ÈáçÂëΩÂêçÊñá‰ª∂Â§π")
                        else:
                            st.success("ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞")
                else:
                    st.info(select_file_or_dir.replace(os.sep," > "))
                    file_upload_tab,new_dir_tab = st.tabs(["‰∏ä‰º†Êñá‰ª∂","Êñ∞Âª∫Êñá‰ª∂Â§π"])
                    with file_upload_tab:
                        is_overwrite = st.checkbox("Ë¶ÜÁõñÂ∑≤ÊúâÊñá‰ª∂",key="is_overwrite")
                        upload_file = st.file_uploader("‰∏ä‰º†Êñá‰ª∂",key="upload_file",accept_multiple_files=True)
                        if upload_file:
                            if st.button("‰∏ä‰º†",key="upload_file_button"):
                                with st.spinner("‰∏ä‰º†‰∏≠..."):
                                    for file in upload_file:
                                        if is_overwrite:
                                            with open(select_file_or_dir_abs+os.sep+file.name,"wb") as f:
                                                f.write(file.read())
                                            st.success(file.name+ " ‰∏ä‰º†ÊàêÂäü")
                                        else:
                                            if os.path.exists(select_file_or_dir_abs+os.sep+file.name):
                                                st.warning(file.name+ " Â∑≤Â≠òÂú®")
                                            else:
                                                with open(select_file_or_dir_abs+os.sep+file.name,"wb") as f:
                                                    f.write(file.read())
                                                st.success(file.name+ " ‰∏ä‰º†ÊàêÂäü")
                                upload_file = None
                                st.info("‰∏ä‰º†ÂÆåÊàê")
                                st.rerun()
                            else:
                                st.success("ËØ∑ÁÇπÂáª‰∏ä‰º†ÊåâÈíÆ‰ª•‰∏ä‰º†Êñá‰ª∂")
                        else:
                            st.success("ËØ∑ÈÄâÊã©Êñá‰ª∂")
                    with new_dir_tab:
                        new_dir_name = st.text_input("ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞",key="new_dir_name")
                        if new_dir_name != "":
                            new_dir = st.button("Êñ∞Âª∫Êñá‰ª∂Â§π",key="new_folder")
                            if new_dir:
                                not_in_name = ["\\","/",">","<",":","*","?","\"","|"]
                                can_be_name = True
                                for i in not_in_name:
                                    if i in new_dir_name:
                                        can_be_name = False
                                if can_be_name:
                                    if os.path.exists(select_file_or_dir_abs+os.sep+new_dir_name):
                                        st.warning("Êñá‰ª∂Â§πÂ∑≤Â≠òÂú®, Êñ∞Âª∫Êñá‰ª∂Â§πÂ§±Ë¥•")
                                    else:
                                        os.mkdir(select_file_or_dir_abs+os.sep+new_dir_name)
                                        st.info("Êñ∞Âª∫Êñá‰ª∂Â§πÊàêÂäü")
                                        st.rerun()
                                else:
                                    st.warning("Êñá‰ª∂Â§πÂêçÁß∞‰∏çÂêàÊ≥ï")
                                new_dir = False
                            else:
                                st.success("ËØ∑ÁÇπÂáªÊñ∞Âª∫Êñá‰ª∂Â§πÊåâÈíÆ‰ª•Êñ∞Âª∫Êñá‰ª∂Â§π")
                        else:
                            st.success("ËØ∑ËæìÂÖ•Êñá‰ª∂Â§πÂêçÁß∞")
            else:
                st.info(select_file_or_dir.replace(os.sep," > "))
                with st.expander("Êü•ÁúãÊñá‰ª∂"):
                    if st.checkbox("ÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ",key="show_file_content"):
                        # Â¶ÇÊûúÊñá‰ª∂Â§ßÂ∞èÂ∞è‰∫é100MÔºåÂàôÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ
                        if os.path.getsize(select_file_or_dir_abs) < 100*1024*1024:
                            if select_file_or_dir_abs.endswith(".txt"):
                                with open(select_file_or_dir_abs,"r",encoding="utf-8") as f:
                                    st.text(f.read())
                            elif select_file_or_dir_abs.endswith(".jpg"):
                                st.image(select_file_or_dir_abs)
                            elif select_file_or_dir_abs.endswith(".png"):
                                st.image(select_file_or_dir_abs)
                            elif select_file_or_dir_abs.endswith(".gif"):
                                st.image(select_file_or_dir_abs)
                            elif select_file_or_dir_abs.endswith(".mp4"):
                                st.video(select_file_or_dir_abs)
                            elif select_file_or_dir_abs.endswith(".mp3"):
                                st.audio(select_file_or_dir_abs,format="audio/mp3")
                            elif select_file_or_dir_abs.endswith(".wav"):
                                st.audio(select_file_or_dir_abs,format="audio/wav")
                            else:
                                st.warning("Êó†Ê≥ïÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ")
                        else:
                            st.warning("Êñá‰ª∂ËøáÂ§ßÔºåÊó†Ê≥ïÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ")
                download,rename_dir_tab,delete_file_tab = st.tabs(["‰∏ãËΩΩÊñá‰ª∂","ÈáçÂëΩÂêçÊñá‰ª∂","Âà†Èô§Êñá‰ª∂"])
                with download:
                    if st.checkbox("ÂàõÂª∫‰∏ãËΩΩÈìæÊé•",key="download_link"):
                        with open(select_file_or_dir_abs,"rb") as f:
                            st.download_button(label="‰∏ãËΩΩÊñá‰ª∂",data=f,file_name=select_file_or_dir.split(os.sep)[-1])
                with delete_file_tab:
                    delete_file = st.button("Âà†Èô§Êñá‰ª∂",key="delete_file")
                    if delete_file:
                        if os.path.isfile(select_file_or_dir_abs):
                            with st.spinner("Âà†Èô§‰∏≠..."):
                                os.remove(select_file_or_dir_abs)
                                st.success("Âà†Èô§ÊàêÂäü")
                                st.rerun()
                        else:
                            st.warning("Êó†Ê≥ïÂà†Èô§Êñá‰ª∂")
                with rename_dir_tab:
                    new_dir_name = st.text_input("ËØ∑ËæìÂÖ•Êõ¥ÂêçÂêéÁöÑÊñá‰ª∂ÂêçÁß∞",key="rename_dir_name")
                    if new_dir_name != "":
                        rename_dir = st.button("ÈáçÂëΩÂêçÊñá‰ª∂",key="rename_folder")
                        if rename_dir:
                            not_in_name = ["\\","/",">","<",":","*","?","\"","|"]
                            can_be_name = True
                            for i in not_in_name:
                                if i in new_dir_name:
                                    can_be_name = False
                            if can_be_name:
                                renamed = (os.sep).join(select_file_or_dir_abs.split(os.sep)[:-1])+os.sep+new_dir_name
                                print(renamed)
                                if os.path.exists(renamed):
                                    st.warning("Êñá‰ª∂Â∑≤Â≠òÂú®")
                                else:
                                    os.rename(select_file_or_dir_abs,renamed)
                                    st.info("ÈáçÂëΩÂêçÊñá‰ª∂ÊàêÂäü")
                                    st.rerun()
                            else:
                                st.warning("Êñá‰ª∂ÂêçÁß∞‰∏çÂêàÊ≥ï")
                            rename_dir = False
                        else:
                            st.success("ËØ∑ÁÇπÂáªÈáçÂëΩÂêçÊñá‰ª∂ÊåâÈíÆ‰ª•ÈáçÂëΩÂêçÊñá‰ª∂")
                    else:
                        st.success("ËØ∑ËæìÂÖ•Êñá‰ª∂ÂêçÁß∞")
        except:
            st.error("ÂèëÁé∞Êú™Áü•ÈîôËØØ")
    else:

        # Ê≤°ÊúâÂÜôÂÖ•ÊùÉÈôêÔºåÊó†Ê≥ï‰øÆÊîπÊñá‰ª∂ÔºåÊó†Ê≥ï‰∏ä‰º†Êñá‰ª∂ÂíåÈáçÂëΩÂêç„ÄÅÂà†Èô§Êñá‰ª∂
        st.title(":blue[Êñá‰ª∂ÁÆ°ÁêÜÂô®üóÇÔ∏è]")
        data_tree = get_folder_structure(data_dir)
        select_file_or_dir = select_file(data_tree)
        select_file_or_dir_abs = select_file_or_dir.replace(".",data_dir,1)
        if is_dir(select_file_or_dir,data_tree):
            if select_file_or_dir != ".":
                st.info(select_file_or_dir.replace(os.sep," > "))
                st.info("ËøôÊòØ‰∏Ä‰∏™Êñá‰ª∂Â§πÔºåËØ∑Âú®‰æßËæπÊ†èÈÄâÊã©‰∏Ä‰∏™Êñá‰ª∂ËøõË°åÊìç‰Ωú")
                st.info("Â¶ÇÈúÄË¶ÅÊõ¥Â§öÊùÉÈôêÔºåËØ∑Âú®‰æßËæπÊ†èËæìÂÖ•ÁÆ°ÁêÜÂëòÂØÜÁ†Å")
            else:
                st.info(select_file_or_dir.replace(os.sep," > "))
                st.info("ËøôÊòØÊ†πÁõÆÂΩïÔºåËØ∑Âú®‰æßËæπÊ†èÈÄâÊã©‰∏Ä‰∏™Êñá‰ª∂ËøõË°åÊìç‰Ωú")
                st.info("Â¶ÇÈúÄË¶ÅÊõ¥Â§öÊùÉÈôêÔºåËØ∑Âú®‰æßËæπÊ†èËæìÂÖ•ÁÆ°ÁêÜÂëòÂØÜÁ†Å")
        else:
            st.info(select_file_or_dir.replace(os.sep," > "))
            with st.expander("Êü•ÁúãÊñá‰ª∂"):
                if st.checkbox("ÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ",key="show_file_content"):
                    # Â¶ÇÊûúÊñá‰ª∂Â§ßÂ∞èÂ∞è‰∫é100MÔºåÂàôÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ
                    if os.path.getsize(select_file_or_dir_abs) < 100*1024*1024:
                        if select_file_or_dir_abs.endswith(".txt"):
                            with open(select_file_or_dir_abs,"r",encoding="utf-8") as f:
                                st.text(f.read())
                        elif select_file_or_dir_abs.endswith(".jpg"):
                            st.image(select_file_or_dir_abs)
                        elif select_file_or_dir_abs.endswith(".jpeg"):
                            st.image(select_file_or_dir_abs)
                        elif select_file_or_dir_abs.endswith(".png"):
                            st.image(select_file_or_dir_abs)
                        elif select_file_or_dir_abs.endswith(".gif"):
                            st.image(select_file_or_dir_abs)
                        elif select_file_or_dir_abs.endswith(".bmp"):
                            st.image(select_file_or_dir_abs)
                        elif select_file_or_dir_abs.endswith(".mp4"):
                            st.video(select_file_or_dir_abs)
                        elif select_file_or_dir_abs.endswith(".mp3"):
                            st.audio(select_file_or_dir_abs,format="audio/mp3")
                        elif select_file_or_dir_abs.endswith(".wav"):
                            st.audio(select_file_or_dir_abs,format="audio/wav")
                        else:
                            st.warning("Êó†Ê≥ïÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ")
                    else:
                        st.warning("Êñá‰ª∂ËøáÂ§ßÔºåÊó†Ê≥ïÊòæÁ§∫Êñá‰ª∂ÂÜÖÂÆπ")
            download, = st.tabs(["‰∏ãËΩΩÊñá‰ª∂"])
            with download:
                if st.checkbox("ÂàõÂª∫‰∏ãËΩΩÈìæÊé•",key="download_link_2"):
                    with open(select_file_or_dir_abs,"rb") as f:
                        st.download_button(label="‰∏ãËΩΩÊñá‰ª∂",data=f.read(),file_name=select_file_or_dir.split(os.sep)[-1])
    if st.sidebar.button("ÈÄÄÂá∫Êñá‰ª∂ÁÆ°ÁêÜÂô®"):
        st.session_state["mode"] = "books"
        st.rerun()
    try:
        exec(settings["additionalcode"],globals())
    except:
        pass
